# Scary Mafia Backend - Complete API Documentation

## Table of Contents
1. [Overview](#overview)
2. [Authentication](#authentication)
3. [User Management](#user-management)
4. [Room Management](#room-management)
5. [Game Logic](#game-logic)
6. [Game Management](#game-management)
7. [Game Participants](#game-participants)
8. [Redis Management](#redis-management)
9. [Data Models](#data-models)
10. [Error Handling](#error-handling)

---

## Overview

**Base URL**: `http://localhost:8000`

**Technology Stack**:
- **Framework**: NestJS (Node.js)
- **Database**: PostgreSQL with TypeORM
- **Cache**: Redis for real-time data
- **Authentication**: Basic auth (no JWT currently)

**Key Features**:
- Real-time room management with Redis
- Auto-start game functionality
- Complete Mafia game mechanics
- Role-based gameplay (Mafia, Police, Doctor, Citizen, Villain)

---

## Authentication

### User Registration
**POST** `/auth/signup`

Register a new user account.

**Request Body**:
```json
{
  "userEmail": "user@example.com",
  "password": "password123",
  "nickname": "player1"
}
```

**Validation Rules**:
- `userEmail`: Valid email address
- `password`: Minimum 6 characters
- `nickname`: Maximum 10 characters, unique

**Response (200)**:
```json
{
  "message": "User created successfully",
  "userId": "123e4567-e89b-12d3-a456-426614174000",
  "userEmail": "user@example.com",
  "nickname": "player1"
}
```

### User Login
**POST** `/auth/login`

Authenticate user credentials.

**Request Body**:
```json
{
  "userEmail": "user@example.com",
  "password": "password123"
}
```

**Response (200)**:
```json
{
  "message": "Login successful",
  "userId": "123e4567-e89b-12d3-a456-426614174000",
  "userEmail": "user@example.com",
  "nickname": "player1"
}
```

---

## User Management

### Get All Users
**GET** `/users/list`

**Response (200)**:
```json
[
  {
    "userId": "123e4567-e89b-12d3-a456-426614174000",
    "userEmail": "user@example.com",
    "nickname": "player1",
    "created_at": "2024-01-01T00:00:00.000Z",
    "img_url": "https://example.com/avatar.jpg"
  }
]
```

### Get User by ID
**GET** `/users/userId/{userId}`

### Get User by Nickname
**GET** `/users/nickname/{nickname}`

### Get User by Email
**GET** `/users/email/{email}`

### Get User Count
**GET** `/users/count`

**Response (200)**: `42`

### Update User
**PUT** `/users/{userId}`

**Request Body**:
```json
{
  "userEmail": "newemail@example.com",
  "nickname": "newplayer",
  "img_url": "https://example.com/new-avatar.jpg"
}
```

---

## Room Management

### Create Room
**POST** `/rooms`

Create a new game room with auto-start functionality.

**Request Body**:
```json
{
  "title": "Mafia Game Room",
  "notes": "Welcome to the game!",
  "hostUserId": "123e4567-e89b-12d3-a456-426614174000",
  "requiredPlayers": 8
}
```

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "title": "Mafia Game Room",
  "notes": "Welcome to the game!",
  "status": "waiting",
  "created_at": "2024-01-01T00:00:00.000Z",
  "requiredPlayers": 8,
  "hostUser": {
    "userId": "123e4567-e89b-12d3-a456-426614174000",
    "nickname": "player1"
  }
}
```

### Update Room
**PUT** `/rooms/{roomId}`

### Get Room
**GET** `/rooms/{roomId}`

### Delete Room
**DELETE** `/rooms/{roomId}`

### Join Room
**POST** `/rooms/{roomId}/join`

**Request Body**:
```json
{
  "userId": "123e4567-e89b-12d3-a456-426614174000"
}
```

**Response (200) - Game Auto-Started**:
```json
{
  "message": "Game started! 8 players joined.",
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "userId": "123e4567-e89b-12d3-a456-426614174000",
  "gameStarted": true,
  "waitingMessage": "Game started! 8 players joined."
}
```

### Leave Room
**POST** `/rooms/{roomId}/leave`

### Get Room Participants
**GET** `/rooms/{roomId}/participants`

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "participants": [
    "123e4567-e89b-12d3-a456-426614174000",
    "789e0123-e89b-12d3-a456-426614174000"
  ],
  "count": 2,
  "requiredPlayers": 8,
  "canStartGame": false,
  "reason": "Need at least 8 players to start. Current: 2"
}
```

### Get User's Current Room
**GET** `/rooms/current/{userId}`

### Leave Current Room
**POST** `/rooms/leave-current`

### Check if Game Can Start
**GET** `/rooms/{roomId}/can-start`

### Get All Waiting Rooms
**GET** `/rooms/waiting`

### Start Game (Manual)
**POST** `/rooms/{roomId}/start-game`

---

## Game Logic

### Get Game State
**GET** `/game-logic/state/{roomId}`

Get the complete game state for a room (admin/development use).

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "phase": "night",
  "dayNumber": 1,
  "players": [
    {
      "userId": "123e4567-e89b-12d3-a456-426614174000",
      "nickname": "player1",
      "role": "mafia",
      "isAlive": true,
      "voteTarget": null,
      "isProtected": false,
      "lastAction": null
    }
  ],
  "eliminatedPlayers": [],
  "voteResults": {},
  "nightActions": {
    "mafiaTarget": null,
    "policeTarget": null,
    "villainTarget": null
  },
  "settings": {}
}
```

### Get Public Game State
**GET** `/game-logic/public-state/{roomId}`

Get public game state without revealing roles (for players).

**Query Parameters**:
- `userId` (optional): Requesting user's ID to show their own role

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "phase": "night",
  "dayNumber": 1,
  "winner": null,
  "players": [
    {
      "userId": "123e4567-e89b-12d3-a456-426614174000",
      "nickname": "player1",
      "isAlive": true,
      "role": "mafia" // Only shown if userId matches
    }
  ],
  "eliminatedPlayers": []
}
```

### Transition to Night Phase
**POST** `/game-logic/transition-night/{roomId}`

Transition game from day to night phase.

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "phase": "night",
  "dayNumber": 1,
  "players": [...],
  "eliminatedPlayers": [],
  "voteResults": {},
  "nightActions": {},
  "settings": {}
}
```

### Transition to Night Result
**POST** `/game-logic/transition-night-result/{roomId}`

Process night actions and transition to night result phase.

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "phase": "night_result",
  "dayNumber": 1,
  "players": [...],
  "eliminatedPlayers": ["789e0123-e89b-12d3-a456-426614174000"],
  "voteResults": {},
  "nightActions": {
    "mafiaTarget": "789e0123-e89b-12d3-a456-426614174000"
  },
  "settings": {}
}
```

### Transition to Day Phase
**POST** `/game-logic/transition-day/{roomId}`

Transition from night result to day discussion phase.

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "phase": "day",
  "dayNumber": 2,
  "players": [...],
  "eliminatedPlayers": ["789e0123-e89b-12d3-a456-426614174000"],
  "voteResults": {},
  "nightActions": {},
  "settings": {}
}
```

### Transition to Vote Phase
**POST** `/game-logic/transition-vote/{roomId}`

Transition from day discussion to voting phase.

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "phase": "vote",
  "dayNumber": 2,
  "players": [...],
  "eliminatedPlayers": ["789e0123-e89b-12d3-a456-426614174000"],
  "voteResults": {},
  "nightActions": {},
  "settings": {}
}
```

### Transition to Day Result
**POST** `/game-logic/transition-day-result/{roomId}`

Process votes and transition to day result phase.

**Response (200)**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "phase": "day_result",
  "dayNumber": 2,
  "players": [...],
  "eliminatedPlayers": [
    "789e0123-e89b-12d3-a456-426614174000",
    "abc12345-e89b-12d3-a456-426614174000"
  ],
  "voteResults": {
    "abc12345-e89b-12d3-a456-426614174000": 3,
    "def67890-e89b-12d3-a456-426614174000": 2
  },
  "nightActions": {},
  "settings": {}
}
```

### Check Win Conditions
**GET** `/game-logic/check-win/{roomId}`

Check if the game should end based on current player state.

**Response (200) - Game Continues**:
```json
{
  "gameEnded": false
}
```

**Response (200) - Game Ended**:
```json
{
  "gameEnded": true,
  "winner": "mafia"
}
```

### Get Player State
**GET** `/game-logic/player/state`

Get a specific player's complete state in an active game.

**Request Body**:
```json
{
  "roomId": "456e7890-e89b-12d3-a456-426614174000",
  "userId": "123e4567-e89b-12d3-a456-426614174000"
}
```

**Response (200)**:
```json
{
  "userId": "123e4567-e89b-12d3-a456-426614174000",
  "nickname": "player1",
  "role": "mafia",
  "isAlive": true,
  "voteTarget": null,
  "isProtected": false,
  "lastAction": null
}
```

**Error Response (404)**:
```json
{
  "statusCode": 404,
  "message": "Player not found in this game or game not found",
  "error": "Not Found"
}
```

---

## Game Management

### Create Game
**POST** `/games`

**Request Body**:
```json
{
  "started_at": "2024-01-01T10:00:00.000Z",
  "ended_at": "2024-01-01T11:00:00.000Z",
  "winner_team": "citizen"
}
```

### Get All Games
**GET** `/games/list`

### Get Game Count
**GET** `/games/count`

### Get Game by ID
**GET** `/games/{gameId}`

---

## Game Participants

### Create Game Participant
**POST** `/game-participants`

**Request Body**:
```json
{
  "gameId": "789e0123-e89b-12d3-a456-426614174000",
  "userId": "123e4567-e89b-12d3-a456-426614174000",
  "role": "citizen",
  "isWinner": true
}
```

### Get Participants by Game
**GET** `/game-participants/game/{gameId}`

### Get Participant Games by User
**GET** `/game-participants/user/{userId}`

### Get Specific Participant
**GET** `/game-participants/{gameId}/{userId}`

### Remove Participant
**DELETE** `/game-participants/{gameId}/{userId}`

### Get User Statistics
**GET** `/game-participants/user/{userId}/stats`

**Response (200)**:
```json
{
  "userId": "123e4567-e89b-12d3-a456-426614174000",
  "totalGames": 10,
  "wins": 6,
  "losses": 4,
  "winRate": 0.6,
  "roleStats": {
    "mafia": { "games": 3, "wins": 2 },
    "citizen": { "games": 5, "wins": 3 },
    "villain": { "games": 2, "wins": 1 }
  }
}
```

### Get Game Winners
**GET** `/game-participants/game/{gameId}/winners`

---

## Redis Management

### Test Redis Connection
**GET** `/redis/test`

**Response (200)**:
```json
{
  "success": true,
  "message": "Redis is connected!",
  "timestamp": "2024-01-01T10:00:00.000Z"
}
```

### Get Redis Status
**GET** `/redis/status`

**Response (200)**:
```json
{
  "connected": true,
  "status": "connected",
  "info": {
    "ping": "PONG",
    "serverInfo": "Redis server info..."
  }
}
```

### Redis Ping
**GET** `/redis/ping`

**Response (200)**:
```json
{
  "pong": true,
  "timestamp": "2024-01-01T10:00:00.000Z"
}
```

---

## Data Models

### Game Phase Enum
```typescript
enum GamePhase {
  STARTING = 'starting',
  NIGHT = 'night',
  NIGHT_RESULT = 'night_result',
  DAY = 'day',
  VOTE = 'vote',
  DAY_RESULT = 'day_result',
  MAFIA_WINS = 'mafia_wins',
  CITIZENS_WINS = 'citizens_wins',
  VILLAGE_WINS = 'village_wins'
}
```

### Role Type Enum
```typescript
enum RoleType {
  MAFIA = 'mafia',
  POLICE = 'police',
  DOCTOR = 'doctor',
  CITIZEN = 'citizen',
  VILLAIN = 'villain'
}
```

### Player State Interface
```typescript
interface PlayerState {
  userId: string;
  nickname: string;
  role: RoleType;
  isAlive: boolean;
  voteTarget?: string;
  isProtected?: boolean;
  lastAction?: string;
}
```

### Game State Interface
```typescript
interface GameState {
  roomId: string;
  gameId?: string;
  phase: GamePhase;
  dayNumber: number;
  players: PlayerState[];
  winner?: 'mafia' | 'citizen' | 'villain';
  eliminatedPlayers: string[];
  currentVoteTarget?: string;
  voteResults: Record<string, number>;
  nightActions: {
    mafiaTarget?: string;
    policeTarget?: string;
    villainTarget?: string;
  };
  settings: {};
}
```

### Database Models

#### User
```json
{
  "userId": "string (UUID)",
  "userEmail": "string (email)",
  "password_hash": "string (hashed)",
  "nickname": "string (max 10 chars)",
  "img_url": "string (optional)",
  "created_at": "Date"
}
```

#### Room
```json
{
  "roomId": "string (UUID)",
  "hostUser": "User (optional)",
  "status": "enum: 'waiting' | 'in_progress' | 'finished'",
  "title": "string (optional)",
  "notes": "string (optional)",
  "requiredPlayers": "number (6-12, default: 8)",
  "created_at": "Date"
}
```

#### Game
```json
{
  "gameId": "string (UUID)",
  "started_at": "Date",
  "ended_at": "Date",
  "winner_team": "enum: 'mafia' | 'citizen' | 'villain'"
}
```

#### GameParticipant
```json
{
  "gameId": "string (UUID)",
  "userId": "string (UUID)",
  "role": "enum: 'mafia' | 'citizen' | 'villain'",
  "isWinner": "boolean"
}
```

---

## Error Handling

### Standard Error Format
```json
{
  "statusCode": 400,
  "message": "Error description",
  "error": "Bad Request"
}
```

### Common HTTP Status Codes
- `200 OK`: Request successful
- `201 Created`: Resource created successfully
- `400 Bad Request`: Invalid request data
- `401 Unauthorized`: Authentication required
- `404 Not Found`: Resource not found
- `409 Conflict`: Resource conflict (e.g., duplicate email)
- `500 Internal Server Error`: Server error

---

## Game Flow

### Typical Game Progression
1. **Room Creation**: Host creates room with required player count
2. **Player Joining**: Players join room via `/rooms/{roomId}/join`
3. **Auto-Start**: Game starts when required players reached
4. **Role Assignment**: System assigns roles (Mafia, Police, Doctor, Citizen, Villain)
5. **Game Phases**:
   - **Night**: Mafia choose target, Police investigate, Doctor protects
   - **Night Result**: Process night actions, show eliminations
   - **Day**: Discussion phase
   - **Vote**: Players vote to eliminate someone
   - **Day Result**: Process votes, check win conditions
6. **Win Conditions**:
   - **Mafia Wins**: Mafia outnumber or equal citizens
   - **Citizens Win**: All mafia eliminated
   - **Villain Wins**: Villain eliminated by vote

### Role Distribution (by player count)
- **8 players**: 2 Mafia, 1 Police, 1 Doctor, 3 Citizens, 1 Villain
- **9 players**: 2 Mafia, 1 Police, 1 Doctor, 4 Citizens, 1 Villain
- **10 players**: 3 Mafia, 1 Police, 1 Doctor, 4 Citizens, 1 Villain
- **11 players**: 3 Mafia, 1 Police, 1 Doctor, 5 Citizens, 1 Villain
- **12 players**: 4 Mafia, 1 Police, 1 Doctor, 6 Citizens, 1 Villain

---

## Environment Variables
```env
# Database
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=password
DB_DATABASE=mafia

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Application
PORT=8000
NODE_ENV=development
```

---

## Rate Limiting
Currently, no rate limiting is implemented.

## CORS
CORS is enabled for all origins in development mode.

## Notes
- All endpoints are currently publicly accessible (no JWT authentication)
- Redis is used for real-time participant tracking and game state
- Auto-start functionality triggers when required player count is reached
- Game state is stored in Redis with 1-hour TTL
- Database stores persistent game records and user data 